name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Use short SHA for versioning
  VERSION: ${{ github.sha }}

jobs:
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Reduced timeout
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clone for faster checkout

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Install vcstool
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install vcstool

      - name: Clean up any Git lock files
        run: |
          echo "Cleaning up any leftover Git lock files..."
          find . -name ".git/index.lock" -delete 2>/dev/null || true
          find . -name ".git/HEAD.lock" -delete 2>/dev/null || true
          find . -name ".git/refs/heads/*.lock" -delete 2>/dev/null || true
          echo "Git lock cleanup completed!"

      - name: Configure Git for private repositories
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          export GIT_TERMINAL_PROMPT=0
          echo "Git configuration completed successfully!"

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          echo "SSH setup completed!"

      - name: Clean up disk space before build
        run: |
          echo "Cleaning up disk space before build..."
          docker system prune -af --volumes
          sudo apt-get clean
          sudo apt-get autoremove -y
          df -h
          echo "Disk cleanup completed!"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Build and push base images (parallel)
        run: |
          cd docker
          chmod +x build.sh
          
          echo "Building base images in parallel..."
          
          # Build base for both platforms in parallel
          (./build.sh --target base --platform linux/amd64 --version $VERSION && \
           docker tag ghcr.io/serene4mr/mowbot:base ghcr.io/serene4mr/mowbot:base-amd64 && \
           docker push ghcr.io/serene4mr/mowbot:base-amd64) &
          
          (./build.sh --target base --platform linux/arm64 --version $VERSION && \
           docker tag ghcr.io/serene4mr/mowbot:base ghcr.io/serene4mr/mowbot:base-arm64 && \
           docker push ghcr.io/serene4mr/mowbot:base-arm64) &
          
          # Wait for both builds to complete
          wait
          
          # Clean up after base builds
          docker system prune -f
          
          # Create multi-arch manifest for base
          docker manifest create ghcr.io/serene4mr/mowbot:base \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base
          
          # Also tag as latest
          docker manifest create ghcr.io/serene4mr/mowbot:base-latest \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base-latest

      - name: Build and push main-dev images (parallel)
        run: |
          cd docker
          
          echo "Building main-dev images in parallel..."
          
          # Build main-dev for both platforms in parallel
          (./build.sh --target main-dev --platform linux/amd64 --version $VERSION && \
           docker tag ghcr.io/serene4mr/mowbot:main-dev ghcr.io/serene4mr/mowbot:main-dev-amd64 && \
           docker push ghcr.io/serene4mr/mowbot:main-dev-amd64) &
          
          (./build.sh --target main-dev --platform linux/arm64 --version $VERSION && \
           docker tag ghcr.io/serene4mr/mowbot:main-dev ghcr.io/serene4mr/mowbot:main-dev-arm64 && \
           docker push ghcr.io/serene4mr/mowbot:main-dev-arm64) &
          
          # Wait for both builds to complete
          wait
          
          # Clean up after main-dev builds
          docker system prune -f
          
          # Create multi-arch manifest for main-dev
          docker manifest create ghcr.io/serene4mr/mowbot:main-dev \
            ghcr.io/serene4mr/mowbot:main-dev-amd64 \
            ghcr.io/serene4mr/mowbot:main-dev-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:main-dev
          
          # Also tag as latest
          docker manifest create ghcr.io/serene4mr/mowbot:main-dev-latest \
            ghcr.io/serene4mr/mowbot:main-dev-amd64 \
            ghcr.io/serene4mr/mowbot:main-dev-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:main-dev-latest

      - name: Build and push CUDA images
        run: |
          cd docker
          
          echo "Building CUDA images (AMD64 only)..."
          
          # Build main-dev-cuda for AMD64 only
          ./build.sh --target main-dev-cuda --platform linux/amd64 --version $VERSION
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda
          
          # Also tag as latest
          docker tag ghcr.io/serene4mr/mowbot:main-dev-cuda ghcr.io/serene4mr/mowbot:main-dev-cuda-latest
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda-latest

      - name: Final cleanup
        if: always()
        run: |
          docker system prune -af --volumes
          echo "âœ… All Docker images built and pushed successfully!"

      - name: Summary
        if: success()
        run: |
          echo "ðŸŽ‰ Build Summary:"
          echo "âœ… Base images: ghcr.io/serene4mr/mowbot:base (multi-arch)"
          echo "âœ… Main-dev images: ghcr.io/serene4mr/mowbot:main-dev (multi-arch)"
          echo "âœ… CUDA images: ghcr.io/serene4mr/mowbot:main-dev-cuda (AMD64)"
          echo "âœ… All images tagged with: $VERSION and latest"
          echo ""
          echo "ðŸ“¦ Available images:"
          echo "  - ghcr.io/serene4mr/mowbot:base"
          echo "  - ghcr.io/serene4mr/mowbot:base-latest"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-latest"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-cuda"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-cuda-latest"
