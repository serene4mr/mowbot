name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Use short SHA for versioning
  VERSION: ${{ github.sha }}

jobs:
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hour timeout
    permissions:
      contents: read
      packages: write
      actions: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better caching

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Install vcstool
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install vcstool

      - name: Configure Git for private repositories
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Set environment variables for Git
          export GIT_TERMINAL_PROMPT=0
          
          # Clear any existing URL rewrites first
          git config --global --unset-all url.https://github.com/.insteadof || true
          git config --global --unset-all url.git@github.com:.insteadof || true
          
          # Use PAT for private repository access - more explicit configuration
          git config --global url."https://${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git config --global url."https://${{ secrets.PAT_TOKEN }}@github.com/".insteadOf "git@github.com:"
          
          # Test the configuration
          echo "Testing Git configuration..."
          git config --global --list | grep url
          
          # Test direct clone to verify PAT works
          echo "Testing direct clone..."
          git clone https://${{ secrets.PAT_TOKEN }}@github.com/serene4mr/mowbot_sdk.git /tmp/test_sdk
          rm -rf /tmp/test_sdk
          
          echo "Git configuration completed successfully!"

      - name: Test PAT token permissions
        run: |
          echo "Testing PAT token permissions..."
          
          # Test if we can access the repository contents
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/serene4mr/mowbot_sdk/contents | head -20
          
          # Test if we can access the repository branches
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/serene4mr/mowbot_sdk/branches | head -20
          
          # Test if we can access the repository commits
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/serene4mr/mowbot_sdk/commits | head -20

      - name: Create repos file with PAT token
        run: |
          echo "Creating mowbot.repos with PAT token..."
          cp mowbot.repos mowbot.repos.backup
          
          # Create new repos file with PAT token in URLs
          echo "repositories:" > mowbot.repos
          echo "  # core" >> mowbot.repos
          echo "  core/mowbot_sdk:" >> mowbot.repos
          echo "    type: git" >> mowbot.repos
          echo "    url: https://${{ secrets.PAT_TOKEN }}@github.com/serene4mr/mowbot_sdk.git" >> mowbot.repos
          echo "    version: main" >> mowbot.repos
          echo "" >> mowbot.repos
          echo "  # external" >> mowbot.repos
          echo "  #external/..." >> mowbot.repos
          echo "" >> mowbot.repos
          echo "  # launcher" >> mowbot.repos
          echo "  launcher/mowbot_launch:" >> mowbot.repos
          echo "    type: git" >> mowbot.repos
          echo "    url: https://${{ secrets.PAT_TOKEN }}@github.com/serene4mr/mowbot_launch.git" >> mowbot.repos
          echo "    version: main" >> mowbot.repos
          echo "" >> mowbot.repos
          echo "  # sensor_component" >> mowbot.repos
          echo "  #sensor_component/..." >> mowbot.repos
          
          echo "New mowbot.repos file:"
          cat mowbot.repos

      - name: Debug PAT token access
        run: |
          echo "Testing PAT token access..."
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/serene4mr/mowbot_sdk | jq '.name, .private, .permissions'
          echo "Testing mowbot_launch..."
          curl -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               https://api.github.com/repos/serene4mr/mowbot_launch | jq '.name, .private, .permissions'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up SSH agent for Docker builds
        run: |
          eval $(ssh-agent -s)
          # Create a dummy SSH key for Docker builds
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "github-actions@mowbot"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build and push base images
        run: |
          cd docker
          chmod +x build.sh
          
          echo "Building base images for both platforms..."
          
          # Build base for AMD64
          ./build.sh --target base --platform linux/amd64 --version $VERSION
          docker tag ghcr.io/serene4mr/mowbot:base ghcr.io/serene4mr/mowbot:base-amd64
          docker push ghcr.io/serene4mr/mowbot:base-amd64
          
          # Build base for ARM64
          ./build.sh --target base --platform linux/arm64 --version $VERSION
          docker tag ghcr.io/serene4mr/mowbot:base ghcr.io/serene4mr/mowbot:base-arm64
          docker push ghcr.io/serene4mr/mowbot:base-arm64
          
          # Create multi-arch manifest for base
          docker manifest create ghcr.io/serene4mr/mowbot:base \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base
          
          # Also tag as latest
          docker manifest create ghcr.io/serene4mr/mowbot:base-latest \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base-latest

      - name: Build and push main-dev images
        run: |
          cd docker
          
          echo "Building main-dev images for both platforms..."
          
          # Build main-dev for AMD64
          ./build.sh --target main-dev --platform linux/amd64 --version $VERSION
          docker tag ghcr.io/serene4mr/mowbot:main-dev ghcr.io/serene4mr/mowbot:main-dev-amd64
          docker push ghcr.io/serene4mr/mowbot:main-dev-amd64
          
          # Build main-dev for ARM64
          ./build.sh --target main-dev --platform linux/arm64 --version $VERSION
          docker tag ghcr.io/serene4mr/mowbot:main-dev ghcr.io/serene4mr/mowbot:main-dev-arm64
          docker push ghcr.io/serene4mr/mowbot:main-dev-arm64
          
          # Create multi-arch manifest for main-dev
          docker manifest create ghcr.io/serene4mr/mowbot:main-dev \
            ghcr.io/serene4mr/mowbot:main-dev-amd64 \
            ghcr.io/serene4mr/mowbot:main-dev-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:main-dev
          
          # Also tag as latest
          docker manifest create ghcr.io/serene4mr/mowbot:main-dev-latest \
            ghcr.io/serene4mr/mowbot:main-dev-amd64 \
            ghcr.io/serene4mr/mowbot:main-dev-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:main-dev-latest

      - name: Build and push CUDA images
        run: |
          cd docker
          
          echo "Building CUDA images (AMD64 only)..."
          
          # Build main-dev-cuda for AMD64 only
          ./build.sh --target main-dev-cuda --platform linux/amd64 --version $VERSION
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda
          
          # Also tag as latest
          docker tag ghcr.io/serene4mr/mowbot:main-dev-cuda ghcr.io/serene4mr/mowbot:main-dev-cuda-latest
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda-latest

      - name: Clean up
        if: always()
        run: |
          # Clean up Docker images to save space
          docker image prune -f
          docker system prune -f
          
          echo "âœ… All Docker images built and pushed successfully!"

      - name: Summary
        if: success()
        run: |
          echo "ðŸŽ‰ Build Summary:"
          echo "âœ… Base images: ghcr.io/serene4mr/mowbot:base (multi-arch)"
          echo "âœ… Main-dev images: ghcr.io/serene4mr/mowbot:main-dev (multi-arch)"
          echo "âœ… CUDA images: ghcr.io/serene4mr/mowbot:main-dev-cuda (AMD64)"
          echo "âœ… All images tagged with: $VERSION and latest"
          echo ""
          echo "ðŸ“¦ Available images:"
          echo "  - ghcr.io/serene4mr/mowbot:base"
          echo "  - ghcr.io/serene4mr/mowbot:base-latest"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-latest"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-cuda"
          echo "  - ghcr.io/serene4mr/mowbot:main-dev-cuda-latest"
