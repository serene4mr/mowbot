name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker/**'
      - 'ansible/**'
      - 'setup-dev-env.sh'
      - '*.env'
      - 'ansible-galaxy-requirements.yaml'
      - 'mowbot.repos'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.sha }}

jobs:
  build-images:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: read
      packages: write
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Setup SSH key and agent (top-level, once)
        id: ssh-agent
        run: |
          set -eu
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          echo "SSH_AUTH_SOCK=$SSH_AUTH_SOCK" >> $GITHUB_ENV
          ssh -T git@github.com || true

      - name: Verify SSH agent for Docker
        run: |
          set -eu
          if [ -n "$SSH_AUTH_SOCK" ] && [ -S "$SSH_AUTH_SOCK" ]; then
            ls -la "$SSH_AUTH_SOCK"
          else
            echo "ERROR: SSH agent socket not found"
            exit 1
          fi
          docker run --rm -e SSH_AUTH_SOCK="$SSH_AUTH_SOCK" \
            -v "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK" alpine:latest \
            sh -c "apk add --no-cache openssh-client && ssh-add -l" || true

      - name: Set up QEMU for multi-platform
        uses: docker/setup-qemu-action@v3

      - name: Install vcstool
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install vcstool

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          export GIT_TERMINAL_PROMPT=0

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      # Multi-arch BASE build (no pruning before manifests!)
      - name: Build and push base images (parallel)
        run: |
          set -eu
          cd docker
          chmod +x build.sh
          (./build.sh --target base --platform linux/amd64 --version $VERSION && \
           docker tag ghcr.io/serene4mr/mowbot:base ghcr.io/serene4mr/mowbot:base-amd64 && \
           docker push ghcr.io/serene4mr/mowbot:base-amd64) &
          (./build.sh --target base --platform linux/arm64 --version $VERSION && \
           docker push ghcr.io/serene4mr/mowbot:base-arm64) &
          wait
          docker manifest create ghcr.io/serene4mr/mowbot:base \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base
          docker manifest create ghcr.io/serene4mr/mowbot:base-latest \
            ghcr.io/serene4mr/mowbot:base-amd64 \
            ghcr.io/serene4mr/mowbot:base-arm64
          docker manifest push ghcr.io/serene4mr/mowbot:base-latest

      # MAXIMUM CLEANUP before CUDA build (do NOT remove /tmp; agent uses it! Only /var/tmp)
      - name: Aggressive cleanup before CUDA build
        run: |
          set -eu
          docker system prune -af --volumes
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /var/tmp/*
          df -h

      - name: Build and push CUDA images (AMD64 only)
        run: |
          set -eu
          cd docker
          ./build.sh --target main-dev-cuda --platform linux/amd64 --version $VERSION
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda
          docker tag ghcr.io/serene4mr/mowbot:main-dev-cuda ghcr.io/serene4mr/mowbot:main-dev-cuda-latest
          docker push ghcr.io/serene4mr/mowbot:main-dev-cuda-latest

      - name: Final cleanup
        if: always()
        run: |
          docker system prune -af --volumes
          echo "âœ… All Docker images built and pushed successfully!"
