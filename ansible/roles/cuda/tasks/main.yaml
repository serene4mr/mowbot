- name: Get CUDA architecture name
  ansible.builtin.shell: |
    if [ "$(uname -m)" = "x86_64" ]; then
      echo "x86_64"
    else
      echo "sbsa"
    fi
  register: cuda_architecture
  changed_when: false

- name: Remove old /etc/apt/sources.list.d/cuda.list
  become: true
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/cuda.list
    state: absent

- name: Install CUDA keyring
  become: true
  ansible.builtin.apt:
    deb: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/{{ cuda_architecture.stdout }}/cuda-keyring_1.1-1_all.deb
    update_cache: true

- name: Get dash-case name of cuda_version
  ansible.builtin.shell: bash -c 'sed -e "s/\./-/g" <<< $(echo {{ cuda_version }})'
  register: cuda__dash_case_cuda_version
  changed_when: false

- name: Install CUDA devel libraries except for cuda-drivers
  become: true
  ansible.builtin.apt:
    name:
      - cuda-command-line-tools-{{ cuda__dash_case_cuda_version.stdout }}
      - cuda-minimal-build-{{ cuda__dash_case_cuda_version.stdout }}
      - libcusparse-dev-{{ cuda__dash_case_cuda_version.stdout }}
      - libcublas-dev-{{ cuda__dash_case_cuda_version.stdout }}
      - libcurand-dev-{{ cuda__dash_case_cuda_version.stdout }}
      - cuda-nvml-dev-{{ cuda__dash_case_cuda_version.stdout }}
      - cuda-nvrtc-dev-{{ cuda__dash_case_cuda_version.stdout }}
    update_cache: true
  when: install_devel == 'y'

- name: Install CUDA libraries except for cuda-drivers
  become: true
  ansible.builtin.apt:
    name:
      - cuda-minimal-build-{{ cuda__dash_case_cuda_version.stdout }}
      - libcusparse-{{ cuda__dash_case_cuda_version.stdout }}
      - libcublas-{{ cuda__dash_case_cuda_version.stdout }}
      - libcurand-{{ cuda__dash_case_cuda_version.stdout }}
    update_cache: true
  when: install_devel != 'y'

- name: Install extra CUDA libraries for x86_64
  become: true
  ansible.builtin.apt:
    name:
      - cuda-nvprof-{{ cuda__dash_case_cuda_version.stdout }}
    update_cache: true
  when: cuda_architecture.stdout == "x86_64"

- name: Install cuda-drivers
  become: true
  ansible.builtin.apt:
    name:
      - cuda-drivers
    update_cache: true
  when: cuda_install_drivers | bool

- name: Add PATH to .bashrc
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ item }}"
    line: "export PATH={{ cuda_bin_path }}:$PATH"
    state: present
    create: true
    mode: 0644
  loop:
    - ~/.bashrc
    - /etc/skel/.bashrc

- name: Add LD_LIBRARY_PATH to bashrc
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ item }}"
    line: "export LD_LIBRARY_PATH={{ cuda_lib_path }}:$LD_LIBRARY_PATH"
    state: present
    create: true
    mode: 0644
  loop:
    - ~/.bashrc
    - /etc/skel/.bashrc

- name: Create GPU vendor directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ vulkan_icd_dir }}"
    - "{{ opengl_vendor_dir }}"
    - "{{ opencl_vendor_dir }}"

- name: Register Vulkan GPU vendors
  become: true
  ansible.builtin.get_url:
    url: https://gitlab.com/nvidia/container-images/vulkan/raw/dc389b0445c788901fda1d85be96fd1cb9410164/nvidia_icd.json
    dest: "{{ vulkan_icd_dir }}/nvidia_icd.json"
    mode: "0644"

- name: Register OpenGL GPU vendors
  become: true
  ansible.builtin.get_url:
    url: https://gitlab.com/nvidia/container-images/opengl/raw/5191cf205d3e4bb1150091f9464499b076104354/glvnd/runtime/10_nvidia.json
    dest: "{{ opengl_vendor_dir }}/10_nvidia.json"
    mode: "0644"

- name: Register OpenCL GPU vendors
  become: true
  ansible.builtin.lineinfile:
    path: "{{ opencl_vendor_dir }}/nvidia.icd"
    line: libnvidia-opencl.so.1
    create: true
    mode: "0644"

- name: Verify CUDA installation
  ansible.builtin.stat:
    path: "{{ cuda_bin_path }}/nvcc"
  register: cuda_nvcc_check

- name: Display CUDA installation status
  ansible.builtin.debug:
    msg: "CUDA nvcc compiler found: {{ cuda_nvcc_check.stat.exists }}"